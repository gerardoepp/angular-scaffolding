app.factory("Data", ['$http', 'toaster',
    function ($http, toaster) { // This service connects to our REST API

        var serviceBase = 'api/public/';

        var obj = {};
        obj.toast = function (data) 
		{
            toaster.pop(data.status, "", data.message, 3000, 'trustedHtml');
        }
		
        obj.get = function (q) 
		{
            return $http.get(serviceBase + q).then(function (results) {
                return results.data;
            });
        };

        obj.getLicence = function (q) 
		{
		    return $http.get(q).then(function (results) {
		        return results.data;
		    });
		};
        
        obj.getCtr = function (q) 
		{
            return $http.get(serviceBase + q).then(function (results) {
                return results.data;
            });
        };
		
		obj.get = function (q, filters, presentations) 
		{			
			if (filters)
			{	
				return $http.get(serviceBase + q, {params:{filters:filters, presentations:presentations }}).then(function (results) {
					return results.data;});
			}
			else
			{
				return $http.get(serviceBase + q).then(function (results) {
	                return results.data;});
			}
        };
        obj.getD = function (q, filters) 
		{			
			return $http.get(serviceBase + q, {params:{filters:filters}}).then(function (results) 
			{
					return results.data;
			});

        };
        obj.getDash = function (q, filters, presentations) 
		{
			if (filters)
			{	
				return $http.get(serviceBase + q, {params:{filters:filters,presentations:presentations}}).then(function (results) {
					return results.data;});
			}
			else
			{
				return $http.get(serviceBase + q + '?filters=[]&presentations=' + presentations).then(function (results) {
					return results.data;});
			}
        };
		
        obj.getP = function (q, filters, presentations) 
		{
			if (filters)
			{	
				return $http.get(serviceBase + q, {params:{filters:filters, presentations:presentations}}).then(function (results) {
					return results.data;});
			}
			else
			{	
				return $http.get(serviceBase + q).then(function (results) {					
					return results.data;});
			}
        };
		
        obj.post = function (q, object) 
		{
            return $http.post(serviceBase + q, object).then(function (results) {
                return results.data;
            });
        };
		
        obj.put = function (q, object) 
		{
            return $http.put(serviceBase + q, object).then(function (results) {
                return results.data;
            });
        };
		
        obj.delete = function (q) 
		{
            return $http.delete(serviceBase + q).then(function (results) {
                return results.data;
            });
        };

        return obj;
}]);


app.factory('AuthInterceptor', function ($window, $q, $location, toaster) {
    return {
        responseError: function(response) {
            if (response.status === 401) 
            {
            	if (response.config.url.indexOf("/s/lo") > -1)
            	{
	            	sessionStorage.setItem('loyaltyAuthenticated','false');
	                toaster.pop("error", "", "Credenciales invalidas, por favor intente iniciar sesión nuevamente", 5000, 'trustedHtml');
	                $location.path("lo");
            	}
            	else
            	{
            		if ("Credenciales vencidas, por favor intente iniciar sesión nuevamente" === previousToast) 
		            {
		                return false;
		            } 
		            else 
		            {
		               previousToast = "Credenciales vencidas, por favor intente iniciar sesión nuevamente";	
            		   sessionStorage.setItem('loyaltyAuthenticated','false');
	                   toaster.pop("error", "", "Credenciales vencidas, por favor intente iniciar sesión nuevamente", 5000, 'trustedHtml');
	                   $location.path("lo");
		            }
            	}
            }
            else if (response.status === 400) 
            {
                toaster.pop("error", "", mensajesSistema[response.data.code]);
            } 
            else if (response.status === 403)
            {
            	if (response.config.url == "/s/pr")
            	{        	
		            cantidadIntentos = cantidadIntentos + 1;
		            if (cantidadIntentos == 3)
		            {
		               cantidadIntentos = 0;
		               toaster.pop("error", "", "Cantidad de intentos alcanzado. Por favor, contacte con administración", 5000, 'trustedHtml'); 
		               $location.path("lo"); 	               
		            }
		            else
		            {
		               toaster.pop("error", "", "Respuesta secreta invalida. Por favor, verifique...", 5000, 'trustedHtml'); 		            	
		            }
            	}
            }           
            return response || $q.when(response);
        }
    };
});